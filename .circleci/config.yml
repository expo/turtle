version: 2.1

executors:
  nix: &nix
    docker:
      - image: lnl7/nix:2.2
    # Symlink to the readline-enabled bash which is the default command of the container
    shell: /run/current-system/sw/bin/bash -leo pipefail
    working_directory: ~/turtle
  mac:
    macos: # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: '10.1.0'
    working_directory: /Users/distiller/project
    shell: /bin/bash -leo pipefail
  android:
    <<: *nix
    resource_class: xlarge

commands:
  install_nix:
    steps:
      - run:
          name: Install nix
          command: curl https://nixos.org/releases/nix/nix-2.2.1/install | bash -s -- --no-daemon
      - run:
          name: Add nix-initializing line to .bashrc
          command: echo ". ~/.nix-profile/etc/profile.d/nix.sh" >> ~/.bashrc

  setup:
    steps:
      - run:
          name: Install common packages
          command: |
            nix-env -iA \
              nixpkgs.binutils \
              nixpkgs.curl \
              nixpkgs.direnv \
              nixpkgs.findutils \
              nixpkgs.gawk \
              nixpkgs.git \
              nixpkgs.gnused \
              nixpkgs.gnutar \
              nixpkgs.gzip \
              nixpkgs.openssh \
              nixpkgs.python \
              nixpkgs.xz
      - run:
          name: Configure direnv
          command: |
            mkdir -p ~/.config/direnv
            echo -e "[whitelist]\nprefix = [ \"$HOME\" ]" > ~/.config/direnv/config.toml
            echo 'eval "$(direnv export bash)"' >> ~/.bash_profile
      - run:
          name: Configure yarn
          command: echo '--frozen-lockfile true' >> ~/.yarnrc
      - checkout
      - run:
          name: Configure aws-cli
          command: |
              aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
              aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

  setup_nix:
    steps:
      - run:
          name: Add cp and rm stubs
          command: |
            cat \<< 'EOF' >> /bin/cp
            #! /usr/bin/env bash
            /usr/bin/env cp "$@"
            EOF
            chmod +x /bin/cp

            cat \<< 'EOF' >> /bin/rm
            #! /usr/bin/env bash
            /usr/bin/env rm "$@"
            EOF
            chmod +x /bin/rm

  decrypt_secrets_if_possible:
    steps:
      - run:
          name: Decrypt secrets if possible
          command: |
            if [[ -z "$TURTLE_GIT_CRYPT_KEY_BASE64" ]]; then
              echo 'git-crypt key not present in environment'
            else
              git crypt unlock <(echo $TURTLE_GIT_CRYPT_KEY_BASE64 | base64 --decode)
            fi

  restore_yarn_cache:
    parameters:
      workingdir:
        type: string
        default: .
    steps:
      - restore_cache:
          key: yarn-v1-{{ checksum "<< parameters.workingdir >>/yarn.lock" }}

  save_yarn_cache:
    parameters:
      workingdir:
        type: string
        default: .
    steps:
      - save_cache:
          key: yarn-v1-{{ checksum "<< parameters.workingdir >>/yarn.lock" }}
          paths:
            - ~/.cache/yarn # `yarn cache dir`

  restore_workingdir_cache:
    parameters:
      platform:
        type: string
        default: ios
      sdk_version:
        type: string
        default: sdk32
    steps:
      - restore_cache:
          key: "workingdir-v1-<< parameters.platform >>-<< parameters.sdk_version >>"

  save_workingdir_cache:
    parameters:
      workingdir:
        type: string
        default: /Users/distiller/project/workingdir
      platform:
        type: string
        default: ios
      sdk_version:
        type: string
        default: sdk32
    steps:
      - save_cache:
          key: "workingdir-v1-<< parameters.platform >>-<< parameters.sdk_version >>"
          paths:
            - "<< parameters.workingdir >>/<< parameters.platform >>/<< parameters.sdk_version >>"

jobs:
  build:
    executor: nix
    steps:
      - setup
      - restore_yarn_cache
      - run: yarn
      - save_yarn_cache
      - run: yarn lint
      - run: yarn build

  unit_tests:
    executor: nix
    steps:
      - setup
      - restore_yarn_cache
      - run: yarn
      - save_yarn_cache
      - run:
          name: Run unit tests
          command: ./scripts/tests/runUnitTestsCI.sh

  ios_smoke_tests:
    executor: mac
    steps:
      - install_nix
      - setup
      - decrypt_secrets_if_possible
      - restore_yarn_cache
      - run: yarn
      - save_yarn_cache
      - restore_workingdir_cache:
          sdk_version: sdk32
          platform: ios
      - run:
          name: Run iOS smoke tests
          command: ./scripts/tests/runIOSSmokeTestsCI.sh
      - save_workingdir_cache:
          workingdir: /Users/distiller/project/workingdir
          sdk_version: sdk32
          platform: ios

  android_smoke_tests:
    executor: android
    steps:
      - setup
      - setup_nix
      - restore_yarn_cache
      - run: yarn
      - save_yarn_cache
      - restore_workingdir_cache:
          sdk_version: sdk32
          platform: android
      - run:
          name: Fetch Android shell app
          command: SDK_VERSION=sdk32 ./scripts/android/fetchRemoteAndroidTarball.sh
      - run:
          name: Run Android smoke tests
          command: |
            nix-shell nix/android-shell.nix --pure \
              --run "./scripts/tests/runAndroidSmokeTestsCI.sh"
      - save_workingdir_cache:
          workingdir: ~/turtle/workingdir
          sdk_version: sdk32
          platform: android

workflows:
  checks:
    jobs:
      - build
  tests:
    jobs:
      - unit_tests
      - ios_smoke_tests
      - android_smoke_tests
